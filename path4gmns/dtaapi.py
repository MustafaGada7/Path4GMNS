import os
import ctypes
from sys import platform


__all__ = [
    'perform_network_assignment_DTALite',
    'generate_default_settings',
    'generate_zones',
    'generate_demand',
    'perform_cbi',
    'perform_cbsa'
]


if platform.startswith('win32'):
    _dtalite_dll = os.path.join(os.path.dirname(__file__), 'bin/DTALite.dll')
    _dlsim_dll = os.path.join(os.path.dirname(__file__), 'bin/DLSim.dll')
elif platform.startswith('linux'):
    _dtalite_dll = os.path.join(os.path.dirname(__file__), 'bin/DTALite.so')
    _dlsim_dll = os.path.join(os.path.dirname(__file__), 'bin/DLSim.so')
elif platform.startswith('darwin'):
    _dtalite_dll = os.path.join(os.path.dirname(__file__), 'bin/DTALite.dylib')
    _dlsim_dll = os.path.join(os.path.dirname(__file__), 'bin/DLSim.dylib')
else:
    raise Exception('Please build the shared library compatible to your OS\
                    using source files')

_dtalite_engine = ctypes.cdll.LoadLibrary(_dtalite_dll)
_dlsim_engine = ctypes.cdll.LoadLibrary(_dlsim_dll)

_dtalite_engine.network_assignment.argtypes = [ctypes.c_int,
                                               ctypes.c_int,
                                               ctypes.c_int]


def perform_network_assignment_DTALite(assignment_mode,
                                       column_gen_num,
                                       column_update_num):
    """ python interface to call DTALite (precompiled as shared library)

    perform network assignment using the selected assignment mode

    WARNING
    -------
    MAKE SURE TO BACKUP agent.csv and link_performance.csv if you have
    called perform_network_assignment() before. Otherwise, they will be
    overwritten by results generated by DTALite.

    Parameters
    ----------
    assignment_mode
        0: Link-based UE, only generates link performance file without agent
           path file
        1: Path-based UE, generates link performance file and agent path file
        2: UE + dynamic traffic assignment (DTA), generates link performance file and agent path file
        3: ODME

    column_gen_num
        number of iterations to be performed before on generating column pool

    column_update_iter
        number of iterations to be performed on optimizing column pool

    Outputs
    -------
    Depending on the selected assignment_mode, one or two of the following
    files will be generated.

    1. agent.csv: paths/columns
    2. link_performance.csv: assigned volumes and other link attributes on each
       link

    Link-based UE, link_performance.csv
    Path-based UE, agent.csv and link_performance.csv
    UE + DTA, agent.csv and link_performance.csv
    ODME
    """
    # make sure assignment_mode is right
    assert(assignment_mode in [0, 1, 2, 3])
    # make sure iteration numbers are both non-negative
    assert(column_gen_num>=0)
    assert(column_update_num>=0)

    print('\nDTALite run starts')

    _dtalite_engine.network_assignment(assignment_mode,
                                       column_gen_num,
                                       column_update_num)

    print('\nDTALite run completes\n')
    print(
        f'check link_performance.csv in '+os.getcwd()+' for link performance\n'
        f'check agent.csv in '+os.getcwd()+' for unique agent paths\n'
    )


def perform_network_assignment_DTALite():
    """ perform network assignment using settings from settings.csv
    
    The underlying DLSim engine will be called rather than DTALite.

    It will only need node.csv and link.csv to run:
    - if there is no settings.csv, a default settings.csv will be generated;
    - if there is no zone.csv, a zone.csv will be synthesized;
    - if there is no demand.csv, a sef of demand files will be synthesized.
    """
    _dlsim_engine.perform_network_assignment()


def generate_default_settings():
    """ automatically generate default settings.csv if it is not provided """
    _dlsim_engine.generate_default_settings()


def generate_zones():
    """ automatically generate zone.csv if it is not provided """
    _dlsim_engine.generate_zones()


def generate_demand():
    """ automatically generate a set of demand files if demand.csv is not provided 
    
    Path4GMNS will only use input_matrix.csv as input to set up demand. See 
    read_demand_matrix() in utils.py for details.
    """
    _dlsim_engine.generate_demand()


def perform_cbi():
    """ cbi mode in DLSim-MRM """
    _dlsim_engine.perform_cbi()


def perform_cbsa():
    """ cbsa mode in DLSim-MRM """
    _dlsim_engine.perform_cbsa()